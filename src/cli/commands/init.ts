import { Command } from 'commander';
import { promises as fs } from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export const initCommand = new Command('init')
  .description('Initialize DevFlow for Claude Code')
  .option('--skip-docs', 'Skip creating .docs/ structure')
  .action(async (options) => {
    console.log('üöÄ DevFlow - Agentic Development Toolkit');
    console.log('   Intelligent tools for reliable AI-assisted development\n');

    // Check for Claude Code
    const claudeDir = path.join(process.env.HOME || '', '.claude');
    try {
      await fs.access(claudeDir);
      console.log('üîç Detected Claude Code ‚úÖ\n');
    } catch {
      console.error('‚ùå Claude Code not detected');
      console.error('\nInstall Claude Code from: https://claude.com/claude-code');
      process.exit(1);
    }

    console.log('üõ†Ô∏è Installing DevFlow for Claude Code...');

    // Get the root directory of the devflow package
    const rootDir = path.resolve(__dirname, '../..');
    const claudeSourceDir = path.join(rootDir, 'src', 'claude');

    try {
      // Clean old DevFlow files before installing
      console.log('  üßπ Cleaning old DevFlow files...');
      const commandsDevflowDir = path.join(claudeDir, 'commands', 'devflow');
      const agentsDevflowDir = path.join(claudeDir, 'agents', 'devflow');
      const devflowScriptsDir = path.join(process.env.HOME || '', '.devflow', 'scripts');

      // Remove old DevFlow subdirectories (not entire commands/agents folders)
      try {
        await fs.rm(commandsDevflowDir, { recursive: true, force: true });
        await fs.rm(agentsDevflowDir, { recursive: true, force: true });
        await fs.rm(devflowScriptsDir, { recursive: true, force: true });
      } catch (e) {
        // Directories might not exist on first install
      }

      // Install commands
      console.log('  üìÇ Installing commands...');
      await fs.mkdir(commandsDevflowDir, { recursive: true });
      await copyDirectory(path.join(claudeSourceDir, 'commands', 'devflow'), commandsDevflowDir);

      // Install sub-agents
      console.log('  ü§ñ Installing sub-agents...');
      await fs.mkdir(agentsDevflowDir, { recursive: true });
      await copyDirectory(path.join(claudeSourceDir, 'agents', 'devflow'), agentsDevflowDir);

      // Install scripts
      console.log('  üìú Installing scripts...');
      await fs.mkdir(devflowScriptsDir, { recursive: true });
      await copyDirectory(path.join(claudeSourceDir, 'scripts'), devflowScriptsDir);

      // Make scripts executable
      const scripts = await fs.readdir(devflowScriptsDir);
      for (const script of scripts) {
        await fs.chmod(path.join(devflowScriptsDir, script), 0o755);
      }

      // Install settings
      console.log('  ‚öôÔ∏è Installing settings...');
      await fs.copyFile(
        path.join(claudeSourceDir, 'settings.json'),
        path.join(claudeDir, 'settings.json')
      );

      console.log('  ‚úÖ Claude Code installation complete\n');

      // Create .claudeignore in git repository root
      try {
        // Find git repository root
        const gitRoot = execSync('git rev-parse --show-toplevel', {
          cwd: process.cwd(),
          encoding: 'utf-8'
        }).trim();

        const claudeignorePath = path.join(gitRoot, '.claudeignore');

        // Check if .claudeignore already exists
        try {
          await fs.access(claudeignorePath);
          console.log('üîí Security: .claudeignore already exists (skipping)');
        } catch {
          // Create comprehensive .claudeignore
          const claudeignoreContent = `# DevFlow .claudeignore - Protects against sensitive files and context pollution
# Generated by DevFlow - Edit as needed for your project

# === SECURITY: Sensitive Files ===
# Environment and secrets
.env
.env.*
.env.local
.env.*.local
*.env
.envrc

# Credentials and keys
*.key
*.pem
*.p12
*.pfx
*.cer
*.crt
*.der
id_rsa
id_dsa
id_ecdsa
id_ed25519
*.ppk
*_rsa
*_dsa
*secret*
*password*
*credential*
credentials.json
secrets.json
secrets.yaml
secrets.yml

# Cloud provider credentials
.aws/credentials
.aws/config
.gcp/credentials.json
.azure/credentials

# Package manager credentials
.npmrc
.pypirc
.gem/credentials
pip.conf

# Database
*.sql
*.db
*.sqlite
*.sqlite3

# === DEPENDENCIES & BUILD ===
# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
.pnpm-store/

# Python
__pycache__/
*.py[cod]
*$py.class
.Python
env/
venv/
ENV/
.venv/
pip-log.txt
pip-delete-this-directory.txt
.eggs/
*.egg-info/
dist/
build/
*.whl

# Ruby
vendor/bundle/
.bundle/

# Go
vendor/
go.sum

# Rust
target/
Cargo.lock

# Java
target/
*.class
*.jar
*.war

# PHP
vendor/
composer.lock

# === BUILD ARTIFACTS ===
dist/
build/
out/
.next/
.nuxt/
.output/
.vite/
.cache/
.parcel-cache/
.turbo/
*.tsbuildinfo

# === LOGS & TEMP FILES ===
logs/
*.log
*.tmp
*.temp
*.swp
*.swo
*~
.DS_Store
Thumbs.db
*.bak
*.orig
*.rej
.cache

# === VERSION CONTROL ===
.git/
.svn/
.hg/
.gitignore

# === IDE & EDITORS ===
.vscode/
.idea/
*.sublime-*
*.code-workspace
.project
.classpath
.settings/

# === TEST COVERAGE ===
coverage/
.nyc_output/
htmlcov/
.coverage
.pytest_cache/
.tox/

# === OS-SPECIFIC ===
.DS_Store
.AppleDouble
.LSOverride
Thumbs.db
ehthumbs.db
Desktop.ini

# === MEDIA & LARGE FILES ===
*.mp4
*.avi
*.mov
*.wmv
*.flv
*.mp3
*.wav
*.zip
*.tar.gz
*.rar
*.7z
*.dmg
*.iso

# === DOCUMENTATION BUILD ===
site/
_site/
.docusaurus/
.vuepress/dist/

# === LOCK FILES (usually not needed for AI context) ===
package-lock.json
yarn.lock
pnpm-lock.yaml
Gemfile.lock
poetry.lock
Pipfile.lock
`;

          await fs.writeFile(claudeignorePath, claudeignoreContent, 'utf-8');
          console.log('üîí Security: Created .claudeignore at repository root');
          console.log('   ‚Ä¢ Protects sensitive files (credentials, keys, secrets)');
          console.log('   ‚Ä¢ Reduces context pollution (node_modules, build artifacts)');
          console.log('   ‚Ä¢ Covers common patterns for all major languages\n');
        }
      } catch (error) {
        // Not a git repository or other error - skip .claudeignore creation
        console.log('‚ÑπÔ∏è  Skipped .claudeignore (not in a git repository)\n');
      }

      // Offer to install project documentation structure
      if (!options.skipDocs) {
        console.log('üìÅ Project Documentation Setup\n');
        const docsDir = path.join(process.cwd(), '.docs');

        try {
          await fs.mkdir(path.join(docsDir, 'status', 'compact'), { recursive: true });
          await fs.mkdir(path.join(docsDir, 'reviews'), { recursive: true });
          await fs.mkdir(path.join(docsDir, 'audits'), { recursive: true });

          console.log('   ‚úÖ Created .docs/ structure');
          console.log('   ‚Ä¢ .docs/status/ - Session documentation');
          console.log('   ‚Ä¢ .docs/reviews/ - Code review reports');
          console.log('   ‚Ä¢ .docs/audits/ - Security, performance, architecture audits');
        } catch (error) {
          console.log('   ‚ö†Ô∏è Could not create .docs/ structure (may already exist)');
        }
      }

      console.log('\n‚úÖ DevFlow installation complete!\n');
      console.log('üéØ WHAT\'S INSTALLED:');
      console.log('  üìÅ Claude Code:');
      console.log('     ‚Ä¢ Commands: ~/.claude/commands/');
      console.log('     ‚Ä¢ Sub-agents: ~/.claude/agents/');
      console.log('     ‚Ä¢ Scripts: ~/.devflow/scripts/');
      console.log('     ‚Ä¢ Settings: ~/.claude/settings.json (statusline and model)\n');
      console.log('üìä SMART STATUSLINE:');
      console.log('   ‚úÖ Statusline configured');
      console.log('   ‚Ä¢ Shows project context, git status, session cost, and duration\n');
      console.log('üöÄ QUICK START:');
      console.log('  1. Navigate to a project directory');
      console.log('  2. Run \'/catch-up\' to get oriented');
      console.log('  3. Use \'/pre-commit\' to review uncommitted changes');
      console.log('  4. Run \'/devlog\' to document sessions\n');
      console.log('üìö DOCUMENTATION:');
      console.log('  ‚Ä¢ Read CLAUDE.md for comprehensive guide');
      console.log('  ‚Ä¢ Commands are self-documenting');
      console.log('  ‚Ä¢ Check README.md for quick reference\n');
      console.log('Happy coding with DevFlow! üöÄ');
    } catch (error) {
      console.error('‚ùå Installation failed:', error);
      process.exit(1);
    }
  });

async function copyDirectory(src: string, dest: string): Promise<void> {
  await fs.mkdir(dest, { recursive: true });
  const entries = await fs.readdir(src, { withFileTypes: true });

  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);

    if (entry.isDirectory()) {
      await copyDirectory(srcPath, destPath);
    } else {
      await fs.copyFile(srcPath, destPath);
    }
  }
}